import { FuzzingResults, PropertyAndSequence, VmParsingData } from "../types/types";
/**
 * The function `processMedusa` parses and extracts information from a given line
 * of text to update job statistics and log results for a Medusa testing job.
 * @param {string} line - The function `processMedusa` takes in two parameters:
 * `line` and `jobStats`.
 * @param {FuzzingResults} jobStats - The function `processMedusa` takes in two
 * parameters: `line` of type string and `jobStats` of type `FuzzingResults`.
 */
export declare function processMedusa(line: string, jobStats: FuzzingResults): void;
/**
 * The function `getPropertyAndSequenceString` processes logs to extract property
 * and sequence information based on certain conditions.
 * @param {string} logs - The `logs` parameter is a string containing log entries
 * that may include information about failed or passed tests.
 * @param {VmParsingData} [vmData] - The `vmData` parameter is an optional object
 * that contains data related to Virtual Machine (VM) parsing. It is used in the
 * `getPropertyAndSequenceString` function to assist in parsing logs and extracting
 * function calls. If provided, it helps in parsing function calls with VM-specific
 * information.
 * @returns The function `getPropertyAndSequenceString` returns an array of
 * objects, where each object contains two properties: `brokenProperty` and
 * `sequence`.
 */
export declare function getPropertyAndSequenceString(logs: string, vmData?: VmParsingData): PropertyAndSequence[];
/**
 * The function `getFunctionCallsWithVM` parses logs to extract function calls and
 * format data, optionally applying virtual machine actions based on provided data.
 * @param {string} logs - The `logs` parameter in the `getFunctionCallsWithVM`
 * function is a string that contains information about function calls in a
 * specific format. The function uses a regular expression pattern to extract
 * function calls from this string.
 * @param {VmParsingData} [vmData] - The `vmData` parameter in the
 * `getFunctionCallsWithVM` function is an optional parameter of type
 * `VmParsingData`. It is used to provide additional data for parsing the logs.
 * This parameter can contain information such as `roll`, `time`, and `prank`
 * properties which are
 * @returns The function `getFunctionCallsWithVM` returns an array of strings that
 * represent function calls extracted from the provided `logs` string.
 */
export declare function getFunctionCallsWithVM(logs: string, vmData?: VmParsingData): string[];
/**
 * The function `getFunctionCalls` extracts function calls from a log string in
 * TypeScript using a regular expression pattern.
 * @param {string} logs - Logs is a string containing information about function
 * calls in a specific format. The function `getFunctionCalls` uses a regular
 * expression pattern to extract function calls from the logs. The pattern looks
 * for word characters followed by parentheses containing any characters except
 * closing parentheses, followed by "(block=".
 * @returns An array of strings containing the function calls extracted from the
 * input logs string.
 */
export declare function getFunctionCalls(logs: string): string[];
/**
 * The function `getHeaders` extracts a method name from a log string or returns a
 * default name based on a counter.
 * @param {string} logs - The `logs` parameter is a string that likely contains
 * information about method calls, specifically looking for a method name within
 * quotes following the phrase "for method".
 * @param {number} counter - The `counter` parameter is a number that is used as a
 * fallback value in case the regular expression does not match any method name in
 * the `logs` string.
 * @returns The function `getHeaders` takes in a `logs` string and a `counter`
 * number as parameters. It then uses a regular expression to extract a method name
 * from the `logs` string. If a method name is found, it returns that name.
 * Otherwise, it returns a string `temp_`.
 */
export declare function getHeaders(logs: string, counter: number): string;
/**
 * medusaLogsToFunctions function takes Medusa logs, extracts relevant data, and
 * generates functions based on the extracted information.
 * @param {string} logs - The `medusaLogsToFunctions` function takes in three
 * parameters:
 * @param {string} identifier - The `identifier` parameter is a string that will be
 * used as part of the function names generated by the `medusaLogsToFunctions`
 * function. It helps differentiate the generated functions based on the identifier
 * provided.
 * @param {VmParsingData} [vmData] - The `vmData` parameter in the
 * `medusaLogsToFunctions` function is of type `VmParsingData`. It is an optional
 * parameter that can be passed to the function. This parameter is used in the
 * `getPropertyAndSequenceString` function to parse the logs and extract property
 * and sequence information
 * @returns The function `medusaLogsToFunctions` returns a string that includes
 * generated test functions based on the input logs, identifier, and optional
 * vmData.
 */
export declare function medusaLogsToFunctions(logs: string, identifier: string, vmData?: VmParsingData): string;
